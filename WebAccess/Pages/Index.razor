@page "/"
@inject AdminAccess.AdminAccessClient Client

<style>
  .demo-mat-card {
    max-width: 400px;
    margin-bottom: 5px;
  }

  .demo-mat-card-content {
    padding: 1rem;
  }

  .demo-mat-card-clean-margin {
    margin: 0px;
  }
</style>

<div class="mat-layout-grid">
  <div class="mat-layout-grid-inner">
    <div class="mat-layout-grid-cell">
      <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell">
          <MatButton OnClick="@OnClick">Button</MatButton>

          <MatButton OnClick="@OnPlayClick">Play</MatButton>

          <MatButton OnClick="@OnAddUserClick">Add User</MatButton>
        </div>
      </div>
    </div>
    <div class="mat-layout-grid-cell">
      <MatVirtualScroll Items="@Items" ItemHeight="350" style="height: 100%">
        <ItemTemplate>
          <MatCard class="demo-mat-card">
            <MatCardContent>
              <div class="demo-mat-card-content">
                <MatHeadline6 class="demo-mat-card-clean-margin">
                  @context.DisplayName
                </MatHeadline6>
                <MatSubtitle2 class="demo-mat-card-clean-margin">
                  by @context.UserName (@((DateTime.Now - context.Created).TotalHours.ToString("N0")) ago)
                </MatSubtitle2>
              </div>

              <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                @context.Text
              </MatBody2>
            </MatCardContent>
            <MatCardActions>
              <MatCardActionButtons>
                <MatButton>Read</MatButton>
                <MatButton>Bookmark</MatButton>
              </MatCardActionButtons>

              <MatCardActionIcons>
                <MatIconButton Icon="@MatIconNames.Favorite"></MatIconButton>
              </MatCardActionIcons>
            </MatCardActions>
          </MatCard>
        </ItemTemplate>
      </MatVirtualScroll>
    </div>
    <div class="mat-layout-grid-cell">First level</div>
  </div>
</div>

@code
{
  public class Temp
  {
    public string Text { get; set; }

    public string DisplayName { get; set; }

    public string UserName { get; set; }

    public DateTime Created { get; set; }
  }

  public List<Temp> Items => new List<Temp> { };
  private QueueItem _queueItem;

  public async Task OnClick(MouseEventArgs e)
  {
    AddQueueRequest request = new AddQueueRequest();
    request.TweetId = 1300840191771340801L;

    var response = await Client.AddQueueItemAsync(request);
    _queueItem = response.Item;
  }

  public async Task OnPlayClick(MouseEventArgs e)
  {
    ReadItemsRequest readRequest = new ReadItemsRequest();
    readRequest.QueueItems.Add(_queueItem);
    var readResponse = await Client.ReadItemsAsync(readRequest);
  }

  public async Task OnAddUserClick(MouseEventArgs e)
  {
    var request = new GetTwitterUserRequest();
    request.Handle = "realDonaldTrump";

    var response = await Client.GetTwitterUserAsync(request);
  }
}